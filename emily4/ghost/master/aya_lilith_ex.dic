/*---------------------------------------------------------------------
	簡易記法変換エンジン「あやりりす/EX」
	
	記法（頭の識別1文字はカスタム可能）
	
	エ０２：ほげほげ〜
	テ１２：（ほげほげ｜ふがふが｜ふにゃふにゃ）〜
	テ消　：どこいった〜！
	二人　：バルス！
	エ０３「こんな書き方もできるよ」
	
	待ち無しエ０５： //\w3
	待ちゼロエ０６： //まったくなし
	待ち多めエ０８： //\w9 x 4
	改行無しエ０２： //改行しない
	クリック待ちエ０４： //\x
	
	（ユーザ）さん！
	
	＃これはコメントです
	
	設定：パッシブモード
	設定：クイックセクション
	設定：タイムアウト1000「時間切れ」 (<-単位ミリ秒、時間切れ、を呼出)
	
	すべて
	<<"
	エ０２：てすと！
	">>
	か
	<<'
	エ０２：てすと！
	'>>
	のように囲むこと（AYA複数行記法）
	
	補助関数
	あやりりすEXSurfaceTranslate(？側,サーフィス番号)
	 -> 返りサーフィス番号
	あやりりすEXSakuraScript外部トランスレータ(スクリプト)
	 -> 返り変換後スクリプト
	
---------------------------------------------------------------------*/

//---- あやりりすEX初期化 --------------------------------------------------------------
OnSystemLoad.AAA_AYLEX
{
	timeout_label = ''
	entering_passive_mode = 0
	
	AYALilithEX = 1
	
	_a = GETFUNCLIST('あやりりすEXヘッダ')
	
	AYLex_CHAR_HEADER = IARRAY
	AYLex_CHAR_REGEX = ''
	
	_n = ARRAYSIZE(_a)
	for _i = 0 ; _i < _n ; _i++ {
		_side = TOINT(ZEN2HAN(REPLACE(_a[_i],'あやりりすEXヘッダ','')))
		_var = EVAL(_a[_i])
		
		AYLex_CHAR_HEADER[_side] = _var
		if _i > 0 {
			AYLex_CHAR_REGEX += '|'
		}
		AYLex_CHAR_REGEX += _var
	}
	
	AYLex_SakuraScript_Wait_Insert = 0
	if ISFUNC('あやりりすEXSakuraScript文ウエイト支援') {
		AYLex_SakuraScript_Wait_Insert = あやりりすEXSakuraScript文ウエイト支援
	}
	
	AYLex_SakuraScript_External_Translator = ISFUNC('あやりりすEXSakuraScript外部トランスレータ')
}

//---- あやりりすEXデータ開放 --------------------------------------------------------------
OnSystemUnload.AAA_AYLEX
{
	ERASEVAR('AYLex_CHAR_HEADER','AYLex_CHAR_REGEX','AYLex_SakuraScript_Wait_Insert','AYLex_SakuraScript_External_Translator')
	
	ERASEVAR('timeout_label','entering_passive_mode','AYALilithEX')
}

//---- あやりりすEXトランスレータ --------------------------------------------------------------
OnTranslateInternal.AAA_AYLEX
{
	if SUBSTR(SHIORI3FW.Eventid,0,3) == 'On_' {
		_argv[0]
		return
	}
	ProcessSpecialSyntax(_argv[0])
}

//---- テキストのみフィルタ --------------------------------------------------------------
AYALilithEX.TextOnlyTranslator
{
	_string = RE_SPLIT(_argv[0],'\\(\\|q\[.*?\]\[.*?\]|[!&8cfijmpqsn]\[.*?\]|[-*+014567bcehntuvxz]|_[ablmsuvw]\[.*?\]|__(t|[qw]\[.*?\])|_[!?+nqsV]|[sipw][0-9])')
	_n = ARRAYSIZE(_string)
	_tag = RE_GETSTR()
	_tr = ''
	_qs = 0
	
	for _i = 0 ; _i < _n ; _i++ {
		_tr += EVAL("%(_argv[1])('%(_string[_i])',%(_qs))")
		_tr += _tag[_i]
		if '\_q' _in_ _tag[_i] {
			_qs = ! _qs
		}
	}
	
	_tr
}

//---- テキスト変換部（句読点ウエイト） --------------------------------------------------------------
AYALilithEX.TextOnlyTranslatorFunc
{
	//_argv[0] = 置換対象テキスト
	//_argv[1] = クイックセクション内か否か
	
	_text = _argv[0]
	if ! _argv[1] {
		_text = RE_REPLACEEX(_text, '([、…])(?=.)', '$1\\w5')
		_text = RE_REPLACEEX(_text, '([。！？」』])(?=[^。！？」』])', '$1\\w9')
	}
	_text
}

//---- チェイン・選択 --------------------------------------------------------------
ProcessSpecialSyntax
{
	_txt = _argv[0]
	
	_arr = RE_SPLIT(_txt,'\r\n[=＝]{4,}\r\n',2) //=====区切りでchain
	if STRLEN(_arr[1]) {
		SHIORI3FW.StartChainTalkScriptDirect(_arr[1])
	}
	
	_txt = _arr[0]
	
	_arr = RE_SPLIT(_txt,'\r\n[-—ー−]{4,}\r\n') //-----区切りで複数トークRAND選択

	if GETTYPE(_arr) == 4 {
		_txt = _arr[RAND(ARRAYSIZE(_arr))]
	}
	else {
		_txt = _arr
	}
	
	ProcessAYALilithSyntax(_txt)
}

//---- あやりりすEX記法サブ（カッコで囲まれた補助記法） --------------------------------------------------------------
ProcessAYALilithSyntaxSub
{
	_text = _argv[0]
	_text = REPLACE(_text,'‥','…')
	if TOINT(_argv[1]) == 0 {
		_text = AYALilithEX.TextOnlyTranslator(_text,'AYALilithEX.TextOnlyTranslatorFunc')
	}
	_text = RE_REPLACE(_text,'[（(](ユーザー*|ユーザー*名|ユーザー*さん)[)）]',username)
	
	while RE_SEARCH(_text,'[(（](.+?[|｜].+?)[)）]') {
		_p = RE_GETPOS[0]
		_l = RE_GETLEN[0]
		_s = RE_GETSTR[1]
		
		_text = ERASE(_text,_p,_l)
		_text = INSERT(_text,_p,ANY(RE_SPLIT(_s,'[|｜]')))
	}
	
	_text
}

//---- あやりりすEX記法メイン --------------------------------------------------------------
ProcessAYALilithSyntax
{
	timeout_label = ''
	
	_txtarray  = IARRAY
	_txtarray ,= SPLIT(_argv[0],CHR(0xd,0xa))
	
	_script = ''
	
	_surface_translate_name = 'あやりりすEXSurfaceTranslate'
	_surface_translate_found = ISFUNC(_surface_translate_name)
	
	if (ARRAYSIZE(_txtarray) <= 1) && (RE_SEARCH(_txtarray[0],'^[^\\]*(' + AYLex_CHAR_REGEX + ')[^\\]*?[｢「：]') == 0) {
		_script = _txtarray[0]
		if AYLex_SakuraScript_Wait_Insert {
			_script = ProcessAYALilithSyntaxSub(_script,0)
		}
		else {
			_script = ProcessAYALilithSyntaxSub(_script,1)
		}
		if AYLex_SakuraScript_External_Translator {
			void EVAL('_script = あやりりすEXSakuraScript外部トランスレータ(_script)')
		}
		_script
		return
	}

	_init_script = ''
	_talk_init = 0
	_talk_init_side = IARRAY
	_talk_done_side = IARRAY
	_side = 0
	_side_old = 0
	_sync = 0
	_is_exit = 0
	_quick = 0
	_passive_set = 0
	_timeout_value = 0
	
	_n = ARRAYSIZE(_txtarray)
	for _i = 0 ; _i < _n ; _i++ {
		_txt = _txtarray[_i]
		if _txt != '' {
			_txt_exit = RE_REPLACE(_txt,'(\\w[1-9])*\\-','')
			if _txt != _txt_exit {
				_is_exit = 1
				_txt = _txt_exit
			}

			if RE_SEARCH(_txt,'^[#＃]設定[:：]') { //＃設定：ほげほげ
				_txt = ERASE(_txt,0,4)
				if 'クイック' _in_ _txt {
					if _quick == 0 {
						_quick = 1
						_script += '\_q'
					}
				}
				else {
					if _quick != 0 {
						_quick = 0
						_script += '\_q'
					}
				}
				
				if '受動モード' _in_ _txt || 'パッシブモード' _in_ _txt {
					_passive_set = 1
					if entering_passive_mode == 0 {
						_script += '\![enter,passivemode]'
						entering_passive_mode = 1
					}
				}
				
				if RE_MATCH(_txt,'タイムアウト([0-9０-９]*)[｢「：](.+?)[」｣]?') {
					timeout_label = RE_GETSTR[2]
					if RE_GETSTR[1] != '' {
						_timeout_value = TOINT(ZEN2HAN(RE_GETSTR[1]))
					}
				}
			}
			elseif RE_SEARCH(_txt,'^[#＃]') { //＃コメント
				; //なにもしない
			}
			elseif RE_SEARCH(_txt,'^(.*?)([：＜].+?|[｢「].+?[」｣]?)$') {
				_main = RE_GETSTR[2]
				_cmd = RE_REPLACE(RE_GETSTR[1],'[　 \t]','')
				
				if RE_SEARCH(_main,'^[：＜](.+)$') {
					_main = RE_GETSTR[1]
				}
				elseif RE_SEARCH(_main,'^[｢「](.+?)[」｣]?$') {
					_main = RE_GETSTR[1]
				}
				
				_cmd_wait = _cmd
				_cmd = REPLACE(_cmd,'待ち無し','')
				_cmd = REPLACE(_cmd,'待ちなし','')
				_cmd_wait = (_cmd != _cmd_wait)
				
				_cmd_waitzero = _cmd
				_cmd = REPLACE(_cmd,'待ちゼロ','')
				_cmd_waitzero = (_cmd != _cmd_waitzero)

				_cmd_morewait = _cmd
				_cmd = REPLACE(_cmd,'待ち多め','')
				_cmd = REPLACE(_cmd,'待ち多目','')
				_cmd_morewait = (_cmd != _cmd_morewait)
				
				_cmd_line = _cmd
				_cmd = REPLACE(_cmd,'改行無し','')
				_cmd = REPLACE(_cmd,'改行なし','')
				_cmd_line = (_cmd != _cmd_line)
				
				_cmd_moreline = _cmd
				_cmd = REPLACE(_cmd,'改行多め','')
				_cmd = REPLACE(_cmd,'改行多目','')
				_cmd_moreline = (_cmd != _cmd_moreline)
				
				_cmd_click = _cmd
				_cmd = REPLACE(_cmd,'クリック待ち','')
				_cmd_click = (_cmd != _cmd_click)
				
				if _talk_init != 0 {
					if _cmd_click {
						_talk_done_side = IARRAY
						_script += '\0\x'
					}
					elseif _quick == 0 {
						if _cmd_waitzero {
							; //NOOP
						}
						elseif _cmd_wait { //待ち無し
							_script += "\w3"
						}
						elseif _cmd_morewait { //待ち多め
							_script += "\w9\w9\w9\w9"
						}
						else { //待ち普通
							_script += "\w9\w9"
						}
					}
				}
				
				while 1 {
					_pattern_found = 0
					
					_patnum = ARRAYSIZE(AYLex_CHAR_HEADER)
					for _pat = 0 ; _pat < _patnum ; _pat++ {
						if STRLEN(AYLex_CHAR_HEADER[_pat]) {
							if RE_SEARCH(_cmd,'^' + AYLex_CHAR_HEADER[_pat] + '([0-9.,０-９．，消]*)') {
								_pattern_found = 1
								_side = _pat
								if _sync {
									_sync = 0
									_script += '\_s'
								}
								_cmd = ERASE(_cmd,0,RE_GETLEN[0])
								if _side < 2 {
									_script += "\%(_side)"
								}
								else {
									_script += "\p[%(_side)]"
								}
								
								_spat = RE_GETSTR[1]
								if _spat != '' {
									_talk_init_side[_side] = 1
									if '消' _in_ _spat {
										_script += "\s[-1]"
									}
									else {
										_spat_a = RE_SPLIT(_spat,'[.．,，]',2)
										_surface = TOINT(ZEN2HAN(_spat_a[0]))
										if _surface_translate_found {
											_surface_x = EVAL("%(_surface_translate_name)(_side,_surface)")
											if STRLEN(TOSTR(_surface_x)) {
												_surface = _surface_x
											}
										}
										_script += "\s[%(_surface)]"
										if _spat_a[1] != '' {
											_script += "\i[%(TOINT(ZEN2HAN(_spat_a[1])))]"
										}
									}
								}
							}
						}
					}
					
					if _pattern_found {
						//NOOP - ループ内実行済み
					}
					elseif SUBSTR(_cmd,0,2) == '二人' {
						_cmd = ERASE(_cmd,0,2)
						if _sync == 0 {
							_sync = 1
							_script += '\_s'
						}
					}
					else {
						break
					}
				}
				
				if TOINT(_talk_done_side[_side]) != 0 {
					if _cmd_line == 0 {
						if _side_old != _side {
							if _cmd_moreline {
								_script += "\n\n"
							}
							else {
								_script += "\n\n[half]"
							}
						}
						else {
							if _cmd_moreline {
								_script += "\n\n[half]"
							}
							else {
								_script += "\n"
							}
						}
					}
				}
				_side_old = _side
				
				if _talk_init == 0 {
					if TOINT(_talk_init_side[0]) == 0 {
						_init_script = '\0\s[0]'
					}
					elseif TOINT(_talk_init_side[1]) == 0 {
						_init_script = '\1\s[10]\0'
					}
				}
				
				_talk = ProcessAYALilithSyntaxSub(_main,_quick)
				if _talk != '' {
					_talk_done_side[_side] = 1
					_script += _talk
				}
				_talk_init = 1
			}
			else {
				if _quick == 0 {
					_script += "\w9"
				}
				_script += "\n";
				_script += ProcessAYALilithSyntaxSub(_txt,_quick)
			}
			
			if entering_passive_mode != 0 {
				if _passive_set == 0 {
					_script += '\![leave,passivemode]'
					entering_passive_mode = 0
				}
			}
			
		}
	}
	if _is_exit {
		_script += "\w9\-";
	}
	if _timeout_value {
		_script = "\![set,balloontimeout,%(_timeout_value)]\![set,choicetimeout,%(_timeout_value)]" + _script
	}
	//これが必ず最後
	if _init_script != '' {
		_script = _init_script + _script
	}
	_script
}

